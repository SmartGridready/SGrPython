<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Copyright (c) 2023, SmartGridready, Switzerland. All rights reserved. Source
https://github.com/SmartgridReady/SGrSpecifications  -->
<schema xmlns="http://www.w3.org/2001/XMLSchema" xmlns:sgr="http://www.smartgridready.com/ns/V0/"
  attributeFormDefault="unqualified" elementFormDefault="qualified"
  targetNamespace="http://www.smartgridready.com/ns/V0/" version="0.2.2">
  
  <include schemaLocation="../Generic/SGrSerialIntCapability.xsd" />
  <include schemaLocation="../Generic/BaseTypes.xsd" />

  <complexType name="ModbusAttributes">
    <annotation>
      <documentation>Modbus-specific attributes</documentation>
    </annotation>
    <all>
      <element name="scalingFactor" type="sgr:ScalingFactor" minOccurs="0">
        <annotation>
          <documentation>generic value = dataPoint * m * 10^p </documentation>
        </annotation>
      </element>
      <element name="stepByIncrement" type="unsignedInt" minOccurs="0">
        <annotation>
          <!-- TODO: not understandable -->
          <documentation>each didgit</documentation>
        </annotation>
      </element>
      <element name="sunssf" type="unsignedInt" minOccurs="0">
        <annotation>
          <documentation>a Sunpec specific attribute (scalefactor p -10 ... +10) generic value =
            dataPoint * 10^p note: Sunspec uses sunssf usually as Modbus Register with dynamic
            values check attribute "timeAlignedNotification" </documentation>
        </annotation>
      </element>
      <element name="pollingLatencyMs" type="unsignedInt" minOccurs="0">
        <annotation>
          <documentation>The time for a master slave communication cycle in ms </documentation>
        </annotation>
      </element>
      <element name="accessProtection" type="sgr:AccessProtectionEnabled" minOccurs="0" />
      <element name="layer6Deviation" type="sgr:ModbusLayer6Deviation" minOccurs="0" />
    </all>
  </complexType>
  <complexType name="TimeSyncBlockNotification">
    <annotation>
      <documentation>Time sync block notifications are used to describe a block of registers that
        can be feched simultaneously.</documentation>
    </annotation>
    <sequence>
      <element name="blockCacheIdentification" type="string">
        <annotation>
          <documentation>Identification (used by data points for referencing)</documentation>
        </annotation>
      </element>
      <element name="firstAddress" type="nonNegativeInteger">
        <annotation>
          <documentation>Start address of block</documentation>
        </annotation>
      </element>
      <element name="size" type="int">
        <annotation>
          <documentation>Block size in number of registers</documentation>
        </annotation>
      </element>
      <element name="registerType" type="sgr:RegisterType">
        <annotation>
          <documentation>Modbus register type</documentation>
        </annotation>
      </element>
      <element name="timeToLiveMs" type="long">
        <annotation>
          <documentation>Block cache time in milliseconds</documentation>
        </annotation>
      </element>
    </sequence>
  </complexType>
  <complexType name="ModbusInterfaceDescription">
    <annotation>
      <documentation>Modbus interface properties</documentation>
    </annotation>
    <sequence>
      <element name="modbusInterfaceSelection" type="sgr:ModbusInterfaceSelection" />
      <element name="modbusTcp" type="sgr:ModbusTcp" minOccurs="0" />
      <element name="modbusRtu" type="sgr:ModbusRtu" minOccurs="0" />
      <element name="firstRegisterAddressIsOne" type="boolean">
        <annotation>
          <documentation>True if the first register starts at 1</documentation>
        </annotation>
      </element>
      <element name="bitOrder" type="sgr:BitOrder" />
      <element name="masterFunctionsSupportedList" type="sgr:MasterFunctionsSupportedList" minOccurs="0" />
    </sequence>
  </complexType>
  <simpleType name="ModbusInterfaceSelection">
    <annotation>
      <documentation>Type of Modbus interface</documentation>
    </annotation>
    <restriction base="string">
      <enumeration value="RTU" />
      <enumeration value="TCPIP" />
      <enumeration value="UDPIP" />
      <enumeration value="RTU-ASCII" />
      <enumeration value="TCPIP-ASCII" />
      <enumeration value="UDPIP-ASCII" />
    </restriction>
  </simpleType>
  <complexType name="ModbusDataPointConfiguration">
    <annotation>
      <documentation>Detailed configuration for modbus data point</documentation>
    </annotation>
    <sequence>
      <element name="modbusDataType" type="sgr:ModbusDataType" />
      <element name="address" type="nonNegativeInteger">
        <annotation>
          <documentation> 2-bytes-word address: could be a register address (to address a modbus
            register - inputRegister or holdRegister) or a part of a bit address (together with
            bitRank coil - discreteInput) </documentation>
        </annotation>
      </element>
      <element name="bitRank" type="sgr:BitRank" minOccurs="0" />
      <element name="registerType" type="sgr:RegisterType" />
      <element name="numberOfRegisters" type="int">
        <annotation>
          <documentation>Number of 16-bit registers of this data point</documentation>
        </annotation>
      </element>
    </sequence>
  </complexType>
  <complexType name="MasterFunctionsSupportedList">
    <annotation>
      <documentation>
        Available function/command codes for Master / Clients The various reading, writing and other operations are categorized as follows. The most "primitive" reads and writes are
        A number of sources use alternative terminology, for example Force Single Coil where the standard uses Write Single Coil.[11] Prominent entities within a Modbus slave are:
        ReadDiscreteInputs (code: 2) ReadCoils (code: 1) WriteSingleCoil (code: 5) WriteMultipleCoils (code:15) ReadInputRegisters (code:4) ReadMultipleHoldingRegisters (code:3)
        WriteSingleHoldingRegister (code:6) WriteMultipleHoldingRegisters (code:16) the enum "Primitives" means, that the current register Type supports Single Trasnactions If dpSizeNrRegistarts
        is &gt;1, also the multiple access functions must be supported 
      </documentation>
    </annotation>    
    <sequence>
      <element name="masterFunctionsSupported" type="sgr:MasterFunctionsSupported" maxOccurs="unbounded"/>
    </sequence>
  </complexType>  
  <simpleType name="MasterFunctionsSupported">
    <annotation>
      <documentation> Available function/command codes for Master / Clients The various reading,
        writing and other operations are categorized as follows. The most "primitive" reads and
        writes are A number of sources use alternative terminology, for example Force Single
        Coil where the standard uses Write Single Coil.[11] Prominent entities within a Modbus
        slave are: ReadDiscreteInputs (code: 2) ReadCoils (code: 1) WriteSingleCoil (code: 5)
        WriteMultipleCoils (code:15) ReadInputRegisters (code:4) ReadMultipleHoldingRegisters
        (code:3) WriteSingleHoldingRegister (code:6) WriteMultipleHoldingRegisters (code:16) the
        enum "Primitives" means, that the current register Type supports Single Trasnactions If
        dpSizeNrRegistarts is &gt;1, also the multiple access functions must be supported </documentation>
    </annotation>    <restriction base="string">
      <enumeration value="Primitives">
        <annotation>
          <documentation> "Primitives" support ReadDiscreteInputs (code: 2) ReadCoils (code: 1)
            WriteSingleCoil (code: 5) ReadInputRegisters (code:4) WriteSingleHoldingRegister
            (code:6) for single Register access if numberOfRegisters &gt; 1 "Primitives" supports
            ReadMultipleHoldingRegisters (code:3) WriteMultipleCoils (code:15)
            WriteMultipleHoldingRegisters (code:16) for the register Type being adressed </documentation>
        </annotation>
      </enumeration>
      <enumeration value="ReadDiscreteInputs">
        <annotation>
          <documentation>Master function code= 2</documentation>
        </annotation>
      </enumeration>
      <enumeration value="ReadCoils">
        <annotation>
          <documentation>Master function code: 1</documentation>
        </annotation>
      </enumeration>
      <enumeration value="WriteSingleCoil">
        <annotation>
          <documentation>Master function code: 5</documentation>
        </annotation>
      </enumeration>
      <enumeration value="WriteMultipleCoils">
        <annotation>
          <documentation>Master function code:15</documentation>
        </annotation>
      </enumeration>
      <enumeration value="ReadInputRegisters">
        <annotation>
          <documentation>Master function code:4</documentation>
        </annotation>
      </enumeration>
      <enumeration value="ReadMultipleHoldingRegisters">
        <annotation>
          <documentation>Master function code:3</documentation>
        </annotation>
      </enumeration>
      <enumeration value="WriteSingleHoldingRegister">
        <annotation>
          <documentation>Master function code:6</documentation>
        </annotation>
      </enumeration>
      <enumeration value="WriteMultipleHoldingRegisters">
        <annotation>
          <documentation>Master function code:16</documentation>
        </annotation>
      </enumeration>
      <enumeration value="ReadWriteMultipleRegisters">
        <annotation>
          <documentation>Master function code:23</documentation>
        </annotation>
      </enumeration>
      <enumeration value="MaskWriteRegister">
        <annotation>
          <documentation>Master function code:22</documentation>
        </annotation>
      </enumeration>
      <enumeration value="ReadFIFOQueue">
        <annotation>
          <documentation>Master function code:24</documentation>
        </annotation>
      </enumeration>
      <enumeration value="ReadFileRecord">
        <annotation>
          <documentation>Master function code:20</documentation>
        </annotation>
      </enumeration>
      <enumeration value="WriteFileRecord">
        <annotation>
          <documentation>Master function code:21</documentation>
        </annotation>
      </enumeration>
      <enumeration value="ReadExceptionStatus">
        <annotation>
          <documentation>Master function code:7</documentation>
        </annotation>
      </enumeration>
      <enumeration value="Diagnostic">
        <annotation>
          <documentation>Master function code:8</documentation>
        </annotation>
      </enumeration>
      <enumeration value="GetComEventCounter">
        <annotation>
          <documentation>Master function code:11</documentation>
        </annotation>
      </enumeration>
      <enumeration value="GetComEventLog">
        <annotation>
          <documentation>Master function code:12</documentation>
        </annotation>
      </enumeration>
      <enumeration value="ReportSlaveID">
        <annotation>
          <documentation>Master function code:17</documentation>
        </annotation>
      </enumeration>
      <enumeration value="ReadDeviceIdentification">
        <annotation>
          <documentation>Master function code:43</documentation>
        </annotation>
      </enumeration>
    </restriction>
  </simpleType>
  <complexType name="AccessProtectionEnabled">
    <annotation>
      <documentation> Modbus datapoints may be protected by execptions. If this is the case, a
        datapoint may be selected as true with a range of supported exceptions. A NOT listed
        exception means no XY exception </documentation>
    </annotation>
    <sequence>
      <element name="modbusExceptionCode" type="sgr:ModbusExceptionCode" maxOccurs="unbounded"
        minOccurs="1" />
      <element name="isEnabled" type="boolean" />
    </sequence>
  </complexType>
  <simpleType name="ModbusLayer6Deviation">
    <annotation>
      <documentation>this type is used to manage non standard data type definitions at ISO/OSI Layer
        6</documentation>
    </annotation>
    <restriction base="string">
      <enumeration value="2RegBase1000_L2H">
        <annotation>
          <documentation>2 Registers show a combined value, as example in kWh and MWh beginning with
            lower range @ lower address</documentation>
        </annotation>
      </enumeration>
      <enumeration value="2RegBase1000_H2L">
        <annotation>
          <documentation>2 Registers show a combined value, as example in kWh and MWh beginning with
            lower range @ higher address</documentation>
        </annotation>
      </enumeration>
    </restriction>
  </simpleType>
  <complexType name="ModbusTcp">
    <annotation>
      <documentation> Modbus IP address:Specific P elements for Modbus over IP protocol. This
        definition is partially inherited from 61850-80-5's tPTypeModbusIPEnum typedef but reduced
        to a single interface (not redundant adresses RG1 and RG2) and information layer definitions </documentation>
    </annotation>
    <sequence>
      <element name="port" type="unsignedInt" />
      <element name="address" type="sgr:ModbusIpAddress" />
      <element name="slaveId" type="unsignedShort" />
    </sequence>
  </complexType>
  <simpleType name="ModbusIpAddress">
    <annotation>
      <documentation>Modbus device address</documentation>
    </annotation>
    <restriction base="string">
      <pattern value="\d+\.\d+\.\d+\.\d+|\{\{.*\}\}"></pattern>
    </restriction>
  </simpleType>
   <simpleType name="BitOrder">
    <annotation>
      <documentation> Modbus bit orders are used to apply different conversion transformations to
        data between Modbus device and IEC61850 devices. </documentation>
    </annotation>
    <restriction base="string">
      <enumeration value="BigEndian" />
      <enumeration value="ChangeDWordOrder" />
      <enumeration value="ChangeWordOrder" />
      <enumeration value="ChangeByteOrder" />
      <enumeration value="ChangeBitOrder" />
    </restriction>
  </simpleType>
  <!-- **************************** -->
  <!-- Modbus Address section -->
  <!-- **************************** -->
  <simpleType name="RegisterType">
    <annotation>
      <documentation> Type of the Modbus Data. For slave-role, definition of the Object Type of the
        data: Discretes Input: Single bit, Read-Only; Coils: Single bit, Read-Write; Input
        Registers: 16-bit word, Read-Only; Holding Registers: 16-bit word, Read-Write. </documentation>
    </annotation>
    <restriction base="string">
      <enumeration value="Coil" />
      <enumeration value="DiscreteInput" />
      <enumeration value="InputRegister" />
      <enumeration value="HoldRegister" />
    </restriction>
  </simpleType>
  <simpleType name="BitRank">
    <annotation>
      <documentation>The bit rank used to define a bit address for coils and discreteInput (bitAddress = addr x 16 +
        bitRank)</documentation>
    </annotation>
    <restriction base="unsignedByte">
      <minInclusive value="0" />
      <maxInclusive value="15" />
    </restriction>
  </simpleType>
  <simpleType name="ModbusExceptionCode">
    <annotation>
      <documentation>Type of the Modbus Exceptions sent by Slave (Server) responses.</documentation>
    </annotation>
    <restriction base="string">
      <enumeration value="IllegalFunction">
        <annotation>
          <documentation> "1: Illegal Function Function code received in the query is not recognized
            or allowed by slave" </documentation>
        </annotation>
      </enumeration>
      <enumeration value="IllegalAddress">
        <annotation>
          <documentation> 2: Illegal Data Address Data address of some or all the required entities
            are not allowed or do not exist in slave </documentation>
        </annotation>
      </enumeration>
      <enumeration value="IllegalDataValue">
        <annotation>
          <documentation>3: Illegal Data Value Value is not accepted by slave</documentation>
        </annotation>
      </enumeration>
      <enumeration value="SlaveFailure">
        <annotation>
          <documentation> 4: Slave (Server) Device Failure Unrecoverable error occurred while slave
            was attempting to perform requested action </documentation>
        </annotation>
      </enumeration>
      <enumeration value="ACK">
        <annotation>
          <documentation> 5: Acknowledge Slave has accepted request and is processing it, but a long
            duration of time is required. This response is returned to prevent a timeout error from
            occurring in the master. Master can next issue a Poll Program Complete message to
            determine whether processing is completed </documentation>
        </annotation>
      </enumeration>
      <enumeration value="SlaveBusy">
        <annotation>
          <documentation> 6: Slave (Server) Device Busy Slave is engaged in processing a
            long-duration command. Master should retry later </documentation>
        </annotation>
      </enumeration>
      <enumeration value="NACK">
        <annotation>
          <documentation> 7: Negative Acknowledge Slave (Server) cannot perform the programming
            functions. Master should request diagnostic or error information from slave </documentation>
        </annotation>
      </enumeration>
      <enumeration value="MemoryParityErr">
        <annotation>
          <documentation> 8: Memory Parity Error Slave (Server) detected a parity error in memory.
            Master can retry the request, but service may be required on the slave device </documentation>
        </annotation>
      </enumeration>
      <enumeration value="GtwyPathErr">
        <annotation>
          <documentation> 10: Gateway Path Unavailable Specialized for Modbus gateways. Indicates a
            misconfigured gateway </documentation>
        </annotation>
      </enumeration>
      <enumeration value="GtwyTargetErr">
        <annotation>
          <documentation> 11: Gateway Target Device Failed to Respond Specialized for Modbus
            gateways. Sent when slave fails to respond </documentation>
        </annotation>
      </enumeration>
    </restriction>
  </simpleType>
  <!-- actual serial interface configuration -->
  <complexType name="ModbusRtu">
    <annotation>
      <documentation> Modbus RTU serial port configuration</documentation>
    </annotation>    
    <sequence>
      <element name="slaveAddr" type="unsignedShort" />
      <element name="baudRateSelected" type="sgr:BaudRate" />
      <element name="byteLenSelected" type="sgr:ByteLength" />
      <element name="paritySelected" type="sgr:Parity" />
      <element name="stopBitLenSelected" type="sgr:StopBitLength" />
      <element name="serialInterfaceCapability" type="sgr:SerialInterfaceCapability" />
    </sequence>
  </complexType>
  <!-- modbus data types -->
  <complexType name="ModbusBoolean">
    <annotation>
      <documentation>Modbus specific boolean definition</documentation>
    </annotation>
    <choice>
      <element name="trueValue" type="unsignedShort" minOccurs="0" />
      <element name="falseValue" type="unsignedShort"  minOccurs="0" />
    </choice>
  </complexType>
  <complexType name="ModbusDataType">
    <annotation>
      <documentation>Modbus specific data types</documentation>
    </annotation>
    <choice>
      <element name="boolean" type="sgr:ModbusBoolean" />
      <element name="int8" type="sgr:EmptyType" />
      <element name="int16" type="sgr:EmptyType" />
      <element name="int32" type="sgr:EmptyType" />
      <element name="int64" type="sgr:EmptyType" />
      <element name="int8U" type="sgr:EmptyType" />
      <element name="int16U" type="sgr:EmptyType" />
      <element name="int32U" type="sgr:EmptyType" />
      <element name="int64U" type="sgr:EmptyType" />
      <element name="float32" type="sgr:EmptyType" />
      <element name="float64" type="sgr:EmptyType" />
      <element name="dateTime" type="sgr:EmptyType" />
      <element name="string" type="sgr:EmptyType" />
      <element name="enum" type="sgr:Enum" />
      <element name="bitmap" type="sgr:BitmapProduct" />
    </choice>
  </complexType>
</schema>
