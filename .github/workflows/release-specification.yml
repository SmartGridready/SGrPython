name: Release Python SGrSpecification

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version_bump.outputs.new_version }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install xsdata[cli] wheel twine setuptools

      - name: Check Python and xsdata versions
        run: |
          python --version
          pip show xsdata

      - name: Clone Repository
        uses: actions/checkout@v2
        with:
          repository: 'SmartGridready/SGrSpecifications'

      - name: Run xsdata Command
        run: xsdata SchemaDatabase/SGr -r --package sgrspecification
      - name: Checkout Current Repository
        uses: actions/checkout@v2
        with:
          path: 'sgrpython'
      - name: ls
        run: ls sgrpython
      - name: Copy Setup File
        run: cp ./sgrpython/specification/setup.py .

      - name: Build Package
        run: python setup.py sdist bdist_wheel
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Bump Patch Version
        id: version_bump
        run: |
          # Extract current version, increment patch number, and update setup.py
          VERSION_LINE=$(grep 'version=' setup.py)
          CURRENT_VERSION=$(echo $VERSION_LINE | grep -oP "(?<=').*(?=')")
          IFS='.' read -ra ADDR <<< "$CURRENT_VERSION"
          PATCH=${ADDR[2]}
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${ADDR[0]}.${ADDR[1]}.$NEW_PATCH"
          sed -i "s/$CURRENT_VERSION/$NEW_VERSION/g" ./sgrpython/specification/setup.py
          sed -i "s/SGrSpecificationPythontks4r==.*/SGrSpecificationPythontks4r==$NEW_VERSION/g" ./sgrpython/requirements.txt
          echo "Updated version to $NEW_VERSION"
          cat ./sgrpython/specification/setup.py
          cat ./sgrpython/requirements.txt
          echo "::set-output name=new_version::$NEW_VERSION"
      - name: Create a new branch
        run: |
          echo ${{ steps.version_bump.outputs.new_version }}
          cd ./sgrpython
          git checkout -b version-update-${{ steps.version_bump.outputs.new_version }}
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Bump version to ${{ steps.version_bump.outputs.new_version }}"
          git push --set-upstream origin version-update-${{ steps.version_bump.outputs.new_version }}
      - name: Create Pull Request
        uses: actions/github-script@v6
        with:
          script: |
            const title = `Bump SGr Specification version to ${{ steps.version_bump.outputs.new_version }}`
            const body = `This PR is to bump the version in setup.py for SGr Specification to ${{ steps.version_bump.outputs.new_version }}`
            const base = 'master'
            const head = `version-update-${{ steps.version_bump.outputs.new_version }}`
            const createPullRequest = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              head: head,
              base: base
            });
            console.log("Pull request created: #" + createPullRequest.data.number);
#
#      - name: Checkout Original Repo & Create New Branch
#        uses: actions/checkout@v2
#        with:
#          ref: 'master'
#        run: |
#          git checkout -b update-dependency
#          # Update your dependency here, e.g., by modifying a requirements.txt or setup.py
#
#      - name: Commit and Push Changes
#        run: |
#          git config --global user.email "you@example.com"
#          git config --global user.name "Your Name"
#          git add .
#          git commit -m "Update dependency to latest version"
#          git push origin update-dependency
#
#      - name: Create Pull Request
#        uses: repo-sync/pull-request@v2
#        with:
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#          pr_title: "Update dependency to latest version"
#          pr_body: "This PR updates the dependency to the newly published version on PyPI."
#          branch: "update-dependency"
