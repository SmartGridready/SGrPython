sgr_commhandler.driver.rest.restapi_interface_async
===================================================

.. py:module:: sgr_commhandler.driver.rest.restapi_interface_async


Attributes
----------

.. autoapisummary::

   sgr_commhandler.driver.rest.restapi_interface_async.logger


Classes
-------

.. autoapisummary::

   sgr_commhandler.driver.rest.restapi_interface_async.RestResponse
   sgr_commhandler.driver.rest.restapi_interface_async.RestRequest
   sgr_commhandler.driver.rest.restapi_interface_async.RestDataPoint
   sgr_commhandler.driver.rest.restapi_interface_async.RestFunctionalProfile
   sgr_commhandler.driver.rest.restapi_interface_async.SGrRestInterface


Functions
---------

.. autoapisummary::

   sgr_commhandler.driver.rest.restapi_interface_async.build_rest_data_point


Module Contents
---------------

.. py:data:: logger

.. py:function:: build_rest_data_point(data_point, functional_profile, interface)

.. py:class:: RestResponse(headers, body = None)

   .. py:attribute:: headers


   .. py:attribute:: body
      :value: None



.. py:class:: RestRequest(method, url, headers, query_parameters = ParameterList(), form_parameters = ParameterList(), body = None)

   .. py:attribute:: method


   .. py:attribute:: url


   .. py:attribute:: headers


   .. py:attribute:: query_parameters


   .. py:attribute:: form_parameters


   .. py:attribute:: body
      :value: None



.. py:class:: RestDataPoint(dp_spec, fp_spec, interface)

   Bases: :py:obj:`sgr_commhandler.api.data_point_api.DataPointProtocol`


   Implements a data point of a REST API interface.


   .. py:attribute:: _dp_spec


   .. py:attribute:: _fp_spec


   .. py:attribute:: _read_call
      :type:  sgr_specification.v0.product.rest_api_types.RestApiServiceCall


   .. py:attribute:: _write_call
      :type:  sgr_specification.v0.product.rest_api_types.RestApiServiceCall


   .. py:attribute:: _fp_name
      :value: ''



   .. py:attribute:: _dp_name
      :value: ''



   .. py:attribute:: _interface


   .. py:method:: name()

      Gets the functional profile and data point names.

      :returns: the functional profile and data point names as tuple
      :rtype: tuple[str, str]



   .. py:method:: get_val(skip_cache = False)
      :async:


      Reads the data point value.

      :param skip_cache: does not use cache if true
      :type skip_cache: bool

      :returns: the data point value
      :rtype: Any



   .. py:method:: set_val(value)
      :async:


      Writes the data point value.

      :param value: the data point value to write
      :type value: Any



   .. py:method:: direction()

      Gets the data direction of the data point.

      :returns: the data point direction
      :rtype: DataDirectionProduct



   .. py:method:: unit()

      Gets the unit of measurement of the data point.

      :returns: the unit
      :rtype: Units



   .. py:method:: subscribe(fn)

      Subscribes to changes of the data point value.

      :param fn: the callback method
      :type fn: Callable[[Any], None]



   .. py:method:: unsubscribe()

      Unsubscribes from changes of the data point value.



.. py:class:: RestFunctionalProfile(fp_spec, interface)

   Bases: :py:obj:`sgr_commhandler.api.functional_profile_api.FunctionalProfile`


   Implements a functional profile of a REST API interface.


   .. py:attribute:: _fp_spec


   .. py:attribute:: _interface


   .. py:attribute:: _data_points


   .. py:method:: name()

      Gets the functional profile name.

      :returns: the functional profile name
      :rtype: str



   .. py:method:: get_data_points()

      Gets all data points.

      :returns: all data points
      :rtype: dict[tuple[str, str], DataPoint]



.. py:class:: SGrRestInterface(frame)

   Bases: :py:obj:`sgr_commhandler.api.device_api.SGrBaseInterface`


   Implements a REST API device interface.


   .. py:attribute:: _session
      :value: None



   .. py:attribute:: _cache


   .. py:attribute:: base_url


   .. py:attribute:: functional_profiles


   .. py:method:: is_connected()

      Gets the connection state.

      :returns: the connection state
      :rtype: bool



   .. py:method:: disconnect_async()
      :async:


      Disconnects the device asynchronously.



   .. py:method:: connect_async()
      :async:


      Connects the device asynchronously.



   .. py:method:: authenticate()
      :async:



   .. py:method:: execute_request(request, skip_cache)
      :async:



