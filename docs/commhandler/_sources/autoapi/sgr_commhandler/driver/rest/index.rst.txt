sgr_commhandler.driver.rest
===========================

.. py:module:: sgr_commhandler.driver.rest

.. autoapi-nested-parse::

   Provides the HTTP / REST interface driver.



Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/sgr_commhandler/driver/rest/authentication/index
   /autoapi/sgr_commhandler/driver/rest/request/index
   /autoapi/sgr_commhandler/driver/rest/restapi_interface_async/index


Classes
-------

.. autoapisummary::

   sgr_commhandler.driver.rest.RestDataPoint
   sgr_commhandler.driver.rest.RestFunctionalProfile
   sgr_commhandler.driver.rest.SGrRestInterface


Package Contents
----------------

.. py:class:: RestDataPoint(dp_spec, fp_spec, interface)

   Bases: :py:obj:`sgr_commhandler.api.data_point_api.DataPointProtocol`\ [\ :py:obj:`sgr_specification.v0.product.RestApiFunctionalProfile`\ , :py:obj:`sgr_specification.v0.product.RestApiDataPoint`\ ]


   Implements a data point of a REST API interface.


   .. py:attribute:: _read_call
      :type:  sgr_specification.v0.product.rest_api_types.RestApiServiceCall


   .. py:attribute:: _write_call
      :type:  sgr_specification.v0.product.rest_api_types.RestApiServiceCall


   .. py:attribute:: _interface


   .. py:method:: get_val(parameters = None, skip_cache = False)
      :async:



   .. py:method:: set_val(value)
      :async:



.. py:class:: RestFunctionalProfile(fp_spec, interface)

   Bases: :py:obj:`sgr_commhandler.api.functional_profile_api.FunctionalProfile`\ [\ :py:obj:`sgr_specification.v0.product.RestApiFunctionalProfile`\ ]


   Implements a functional profile of a REST API interface.


   .. py:attribute:: _interface


   .. py:attribute:: _data_points


   .. py:method:: get_data_points()


.. py:class:: SGrRestInterface(frame)

   Bases: :py:obj:`sgr_commhandler.api.device_api.SGrBaseInterface`


   Implements a REST API device interface.


   .. py:attribute:: _session
      :value: None



   .. py:attribute:: _cache


   .. py:attribute:: base_url


   .. py:attribute:: functional_profiles


   .. py:method:: is_connected()


   .. py:method:: disconnect_async()
      :async:



   .. py:method:: connect_async()
      :async:



   .. py:method:: authenticate()
      :async:



   .. py:method:: execute_request(request, skip_cache)
      :async:



