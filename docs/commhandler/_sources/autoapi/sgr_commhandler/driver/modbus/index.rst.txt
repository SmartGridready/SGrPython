sgr_commhandler.driver.modbus
=============================

.. py:module:: sgr_commhandler.driver.modbus


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/sgr_commhandler/driver/modbus/modbus_client_async/index
   /autoapi/sgr_commhandler/driver/modbus/modbus_interface_async/index
   /autoapi/sgr_commhandler/driver/modbus/payload_decoder/index
   /autoapi/sgr_commhandler/driver/modbus/shared_client/index


Classes
-------

.. autoapisummary::

   sgr_commhandler.driver.modbus.ModbusDataPoint
   sgr_commhandler.driver.modbus.ModbusFunctionalProfile
   sgr_commhandler.driver.modbus.SGrModbusInterface


Package Contents
----------------

.. py:class:: ModbusDataPoint(dp_spec, fp_spec, interface)

   Bases: :py:obj:`sgr_commhandler.api.DataPointProtocol`


   Implements a data point of a Modbus interface.


   .. py:attribute:: _dp_spec


   .. py:attribute:: _fp_spec


   .. py:attribute:: _interface


   .. py:attribute:: _dp_name
      :type:  str
      :value: ''



   .. py:attribute:: _fp_name
      :type:  str
      :value: ''



   .. py:attribute:: _address
      :type:  int
      :value: -1



   .. py:attribute:: _data_type
      :type:  Optional[sgr_specification.v0.product.modbus_types.ModbusDataType]
      :value: None



   .. py:attribute:: _size
      :value: -1



   .. py:attribute:: _register_type
      :type:  sgr_specification.v0.product.modbus_types.RegisterType
      :value: None



   .. py:method:: set_val(value)
      :async:


      Writes the data point value.

      :param value: the data point value to write
      :type value: Any



   .. py:method:: get_val(skip_cache = False)
      :async:


      Reads the data point value.

      :param skip_cache: does not use cache if true
      :type skip_cache: bool

      :returns: the data point value
      :rtype: Any



   .. py:method:: name()

      Gets the functional profile and data point names.

      :returns: the functional profile and data point names as tuple
      :rtype: tuple[str, str]



   .. py:method:: direction()

      Gets the data direction of the data point.

      :returns: the data point direction
      :rtype: DataDirectionProduct



   .. py:method:: unit()

      Gets the unit of measurement of the data point.

      :returns: the unit
      :rtype: Units



.. py:class:: ModbusFunctionalProfile(fp_spec, interface)

   Bases: :py:obj:`sgr_commhandler.api.FunctionalProfile`


   Implements a functional profile of a Modbus interface.


   .. py:attribute:: _fp_spec


   .. py:attribute:: _interface


   .. py:attribute:: _data_points


   .. py:method:: name()

      Gets the functional profile name.

      :returns: the functional profile name
      :rtype: str



   .. py:method:: get_data_points()

      Gets all data points.

      :returns: all data points
      :rtype: dict[tuple[str, str], DataPoint]



.. py:class:: SGrModbusInterface(frame, sharedRTU = False)

   Bases: :py:obj:`sgr_commhandler.api.SGrBaseInterface`


   Implements a Modbus device interface.


   .. py:attribute:: byte_order


   .. py:attribute:: address_offset
      :value: -1



   .. py:attribute:: functional_profiles


   .. py:attribute:: _device_id
      :value: ''



   .. py:attribute:: _client_wrapper
      :type:  sgr_commhandler.driver.modbus.shared_client.ModbusClientWrapper
      :value: None



   .. py:method:: __del__()


   .. py:method:: is_connected()

      Gets the connection state.

      :returns: the connection state
      :rtype: bool



   .. py:method:: connect_async()
      :async:


      Connects the device asynchronously.



   .. py:method:: disconnect_async()
      :async:


      Disconnects the device asynchronously.



   .. py:method:: read_data(reg_type, address, size, data_type)
      :async:


      Reads data from the given Modbus address(es).



   .. py:method:: write_data(reg_type, address, data_type, value)
      :async:


      Writes data to the given Modbus address(es).



   .. py:method:: set_slave_id(slave_id)


