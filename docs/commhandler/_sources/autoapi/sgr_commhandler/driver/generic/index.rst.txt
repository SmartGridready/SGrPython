sgr_commhandler.driver.generic
==============================

.. py:module:: sgr_commhandler.driver.generic


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/sgr_commhandler/driver/generic/generic_interface_async/index


Classes
-------

.. autoapisummary::

   sgr_commhandler.driver.generic.GenericDataPoint
   sgr_commhandler.driver.generic.GenericFunctionalProfile
   sgr_commhandler.driver.generic.SGrGenericInterface


Package Contents
----------------

.. py:class:: GenericDataPoint(dp_spec, fp_spec, interface)

   Bases: :py:obj:`sgr_commhandler.api.data_point_api.DataPointProtocol`\ [\ :py:obj:`sgr_specification.v0.generic.DataPointBase`\ ]


   Implements a data point of a generic interface.


   .. py:attribute:: _dp_spec


   .. py:attribute:: _fp_spec


   .. py:attribute:: _fp_name
      :value: ''



   .. py:attribute:: _dp_name
      :value: ''



   .. py:attribute:: _interface


   .. py:method:: name()


   .. py:method:: get_specification()


   .. py:method:: get_val(parameters = None, skip_cache = False)
      :async:



   .. py:method:: set_val(value)
      :async:



   .. py:method:: direction()


   .. py:method:: unit()


.. py:class:: GenericFunctionalProfile(fp_spec, interface)

   Bases: :py:obj:`sgr_commhandler.api.functional_profile_api.FunctionalProfile`\ [\ :py:obj:`sgr_specification.v0.product.GenericFunctionalProfile`\ ]


   Implements a functional profile of a generic interface.


   .. py:attribute:: _fp_spec


   .. py:attribute:: _interface


   .. py:attribute:: _data_points


   .. py:method:: name()


   .. py:method:: get_data_points()


   .. py:method:: get_specification()


.. py:class:: SGrGenericInterface(frame)

   Bases: :py:obj:`sgr_commhandler.api.device_api.SGrBaseInterface`


   SmartGridready External Interface Class for Generic Protocols
   Actually has no communication protocol, just generic data


   .. py:attribute:: functional_profiles


   .. py:method:: is_connected()


   .. py:method:: disconnect_async()
      :async:



   .. py:method:: connect_async()
      :async:



